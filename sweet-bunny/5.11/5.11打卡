/*合并有序链表*/
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
       if (l1==null){
            return l2;
        }
        if(l2==null){
            return l1;
        }
        ListNode head=new ListNode(0);
        ListNode l3=head;
        while (l1!=null&&l2!=null){
          if(l1.val>l2.val){
                l3.next=l2;
                l2=l2.next;
                l3=l3.next;
            }else  {
                l3.next=l1;
                l1=l1.next;
                l3=l3.next;
            }
        }
        if(l1==null&&l2!=null){
            l3.next=l2;
        }else {
            l3.next=l1;
        }
        return head.next;
    }
}
/*快排排序链表*/
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null){
            return null;
        }
        ListNode pnode=new ListNode(0);
        pnode.next=head;
        return quickSort(pnode,null);
    }
    public ListNode quickSort(ListNode start,ListNode end){
        if(start==end||start.next==end){
            return start;
        }
        ListNode tmp=new ListNode(0);
        ListNode tmp1=start.next;
        ListNode p=tmp1;
        ListNode tp=tmp;
        while(p.next!=end){
            if(p.next.val<tmp1.val){
                tp.next=p.next;
                tp=tp.next;
                p.next=p.next.next;
            }else{
                p=p.next;
            }
        }
        tp.next=start.next;
        start.next=tmp.next;
        quickSort(start,tmp1);
        quickSort(tmp1,end);
        return start.next;
    }
}
